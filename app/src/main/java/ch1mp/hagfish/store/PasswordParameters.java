package ch1mp.hagfish.store;

import java.io.Serializable;

/**
 * The PasswordParameters class holds all the parameters that define
 * how a password can be automatically generated by the Generator class.
 *
 * @author Samuel J. Brookes (sjb-ch1mp)
 *
 */
public class PasswordParameters implements Serializable {

    private static final long serialVersionUID = 1986L;
    private int length;
    private boolean lowerCase;
    private boolean upperCase;
    private boolean numeric;
    private boolean extendedSpecialCharacters;
    private Character[] limitedSpecialCharacters;

    /**
     * Default constructor.
     */
    public PasswordParameters()
    {
        length = 15;
        lowerCase = true;
        upperCase = true;
        numeric = true;
        extendedSpecialCharacters = true;
        limitedSpecialCharacters = null;
    }

    /**
     * Constructor with parameters.
     * @param length - the legal length of the password
     * @param lc - whether lower case letters are allowed
     * @param uc - whether upper case letters are allowed
     * @param nums - whether numbers are allowed
     * @param esc - whether extended special characters are allowed
     * @param lsc - specific user-defined special characters
     */
    public PasswordParameters(int length, boolean lc, boolean uc, boolean nums, boolean esc, String lsc)
    {
        this.length = length;
        lowerCase = lc;
        upperCase = uc;
        numeric = nums;
        extendedSpecialCharacters = esc;

        /*
        * If the user has defined special characters - split them into a character array
        * */
        if(lsc.length() > 0)
        {
            limitedSpecialCharacters = new Character[lsc.length()];
            for(int i= 0; i<lsc.length(); i++)
            {
                limitedSpecialCharacters[i] = lsc.charAt(i);
            }
        }
    }

    /*==============
    * Setter methods
    * ==============*/
    public void setLength(int length){ this.length = length; }
    public void setLowerCase(boolean lowerCase){ this.lowerCase = lowerCase; }
    public void setUpperCase(boolean upperCase){ this.upperCase = upperCase; }
    public void setNumeric(boolean numeric){ this.numeric = numeric; }
    public void setExtendedSpecialCharacters(boolean extended){ extendedSpecialCharacters = extended; }
    public void setLimitedSpecialCharacters(Character[] limitedSpecialCharacters){ this.limitedSpecialCharacters = limitedSpecialCharacters; }

    /*==============
     * Getter methods
     * ==============*/
    public int getLength(){ return length; }
    public boolean lowerCaseAllowed(){ return lowerCase; }
    public boolean upperCaseAllowed(){ return upperCase; }
    public boolean numericAllowed(){ return numeric; }
    public boolean extendedSpecialCharactersAllowed(){ return extendedSpecialCharacters; }
    public Character[] getLimitedSpecialCharacters(){ return limitedSpecialCharacters; }

    /**
     * Converts the user-defined special characters back into a String.
     *
     * @return String - the user-defined special characters in a string
     */
    public String getLimitedSpecialCharactersAsString()
    {
        if(limitedSpecialCharacters != null && limitedSpecialCharacters.length > 0)
        {
            StringBuilder lsc = new StringBuilder();
            for(Character c : limitedSpecialCharacters)
            {
                lsc.append(c);
            }
            return lsc.toString();
        }
        return "";
    }
}
